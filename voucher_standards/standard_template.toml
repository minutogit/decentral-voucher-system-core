# =================================================================================
# Vorlage für Gutschein-Standard-Definitionen (standard_template.toml)
# =================================================================================
#
# Diese Datei dient als umfassende Dokumentation und Kopiervorlage zur Erstellung
# neuer, signierter Gutschein-Standards. Sie erklärt alle verfügbaren Felder.
#
# Ein Standard ist in vier Hauptblöcke unterteilt:
# 1. [metadata]:    Beschreibt den Standard selbst.
# 2. [template]:    Definiert Werte, die als Vorlage für neue Gutscheine dienen.
# 3. [validation]:  Legt Regeln fest, anhand derer Gutscheine validiert werden.
# 4. [signature]:   Enthält die kryptographische Signatur des Herausgebers.
#

# =================================================================================
# Block 1: Metadaten
# =================================================================================
#
# Enthält allgemeine, identifizierende Informationen über den Standard.
#
[metadata]
# (String) Der offizielle, menschenlesbare Name des Standards.
name = "Name des Standards (z.B. Regional-Taler)"

# (String) Eine global eindeutige ID für diesen Standard.
# Es wird empfohlen, hier eine Version und ein Datum zu verwenden.
uuid = "STANDARD-NAME-V1-YYYY-MM"

# (String) Eine gängige Abkürzung für die Nennwert-Einheit des Gutscheins.
abbreviation = "RT"

# (String, NEU) Der Name des offiziellen Herausgebers des Standards.
issuer_name = "Name des Herausgebers (z.B. Community Council)"

# (String, Optional, NEU) Eine URL zur Homepage des Standards oder der Community.
homepage_url = "https://example.com/standard-info"

# (String, Optional, NEU) Eine URL zur technischen Dokumentation des Standards.
documentation_url = "https://example.com/standard-docs"

# (Array von Strings, Optional, NEU) Suchbegriffe zur Kategorisierung.
keywords = ["keyword1", "keyword2", "community-currency"]


# =================================================================================
# Block 2: Template (Vorlage)
# =================================================================================
#
# Definiert Werte, die bei der Erstellung eines neuen Gutscheins als Vorlage dienen.
#
[template.fixed]
# (Array von Tabellen, NEU) Eine menschenlesbare, mehrsprachige Beschreibung.
# Jede Tabelle muss einen `lang`-Code (ISO 639-1) und den `text` enthalten.
# Der Platzhalter {{amount}} wird bei der Erstellung automatisch ersetzt.
# Englisch ("en") sollte als internationaler Fallback immer vorhanden sein.
[[template.fixed.description]]
lang = "de"
text = "Gutschein für Waren oder Dienstleistungen im Wert von {{amount}} Einheiten."

[[template.fixed.description]]
lang = "en"
text = "A voucher for goods or services worth {{amount}} units."

# (String, Optional) Ein kurzer Fußnotentext, der auf dem Gutschein angezeigt wird.
footnote = "Optionaler Fußnotentext."

# (String) Definiert den primären Zweck, für den der Gutschein eingelöst werden kann.
primary_redemption_type = "goods_or_services"

# (Boolean) Gibt an, ob die Nennwerte von Gutscheinen dieses Standards addierbar sind ("summable").
#
# true:  Werte sind wie Währung und repräsentieren eine Menge einer einheitlichen
#        Einheit (z.B. "Minuten", "Unzen"). Sie können sinnvoll addiert
#        werden (10 Unzen + 20 Unzen = 30 Unzen).
#
# false: Werte sind wie einzigartige Tickets und repräsentieren einen
#        spezifischen, nicht austauschbaren Anspruch (z.B. "1 Haarschnitt",
#        "1 Konzertkarte für Platz A1"). Das Addieren der Werte ergibt keinen Sinn.
is_summable = true

# (Boolean) Gibt an, ob der Gutschein teilbar ist.
is_divisible = true

# (String, Optional) Regel zur Aufrundung des Gültigkeitsdatums ("P1D", "P1M", "P1Y").
round_up_validity_to = "P1M"

[template.fixed.nominal_value]
# (String) Die Einheit des Nennwerts, die für diesen Standard zwingend ist.
unit = "Regional-Taler"

[template.fixed.collateral]
# (String) Die Art der Besicherung.
type = "Keine"
# (String) Eine allgemeine Beschreibung der Besicherung.
description = "Dieser Gutschein ist durch das Vertrauen der Gemeinschaft besichert."
# (String) Die Bedingungen, unter denen die Besicherung eingefordert werden kann.
redeem_condition = "Nicht zutreffend."

[template.fixed.guarantor_info]
# (Integer) Die Anzahl der benötigten Bürgen für diesen Gutschein.
needed_count = 2
# (String) Eine menschenlesbare Beschreibung der Bürgenanforderungen.
description = "Zwei Bürgen aus der Community sind erforderlich."

# ---

[template.default]
# (String, Optional) Die Standard-Gültigkeitsdauer im ISO 8601-Format.
default_validity_duration = "P5Y"


# =================================================================================
# Block 3: Validierungsregeln
# =================================================================================
#
# Legt die Regeln fest, nach denen ein Gutschein dieses Standards validiert wird.
#
[validation]
# (String, Optional) Legt eine Mindestgültigkeitsdauer bei Erstellung fest.
issuance_minimum_validity_duration = "P1Y"

# (Integer) Legt die Anzahl der erlaubten Nachkommastellen für Beträge fest.
amount_decimal_places = 2

# (Array von Strings) Definiert die erlaubten Transaktionstypen.
allowed_transaction_types = ["init", "split", "redeem"]

# (Array von Strings) Liste aller Felder, die zwingend vorhanden sein müssen.
required_voucher_fields = [
    "voucher_id",
    "creation_date",
    "creator.signature",
    "guarantor_signatures",
]

[validation.guarantor_rules]
# (Boolean) Wenn `true`, werden die Geschlechter der Bürgen überprüft.
gender_specific = true
# (Array von Strings) Liste der benötigten Geschlechter (ISO 5218: "1"=m, "2"=f).
genders_needed = ["1", "2"]


# =================================================================================
# Block 4: Kryptographische Signatur (NEU & ZWINGEND ERFORDERLICH)
# =================================================================================
#
# Dieser Block enthält die digitale Signatur des Herausgebers, die die
# Authentizität und Integrität dieser gesamten Standard-Datei beweist.
#
[signature]
# (String) Die `did:key` des Herausgebers. Sie enthält den öffentlichen
# Schlüssel, der zur Verifizierung der Signatur verwendet wird.
# Format: "did:key:z..."
issuer_id = "did:key:z...PublicKeyDesHerausgebers..."

# (String) Die finale Base58-kodierte Ed25519-Signatur.
# Sie signiert den SHA3-256 Hash des kanonisierten Inhalts dieser Datei
# (ohne den [signature]-Block selbst).
signature = "Base58EncodedSignature..."